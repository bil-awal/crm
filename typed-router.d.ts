/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  RouterLinkPropsTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router/types'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    '$error': RouteRecordInfo<'$error', '/:error(.*)', { error: ParamValue<true> }, { error: ParamValue<false> }>,
    'apps-invoice-add': RouteRecordInfo<'apps-invoice-add', '/apps/invoice/add', Record<never, never>, Record<never, never>>,
    'apps-invoice-edit-id': RouteRecordInfo<'apps-invoice-edit-id', '/apps/invoice/edit/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'apps-invoice-list': RouteRecordInfo<'apps-invoice-list', '/apps/invoice/list', Record<never, never>, Record<never, never>>,
    'apps-invoice-preview-id': RouteRecordInfo<'apps-invoice-preview-id', '/apps/invoice/preview/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'apps-invoices-add': RouteRecordInfo<'apps-invoices-add', '/apps/invoices/add', Record<never, never>, Record<never, never>>,
    'apps-invoices-edit-id': RouteRecordInfo<'apps-invoices-edit-id', '/apps/invoices/edit/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'apps-invoices-list': RouteRecordInfo<'apps-invoices-list', '/apps/invoices/list', Record<never, never>, Record<never, never>>,
    'apps-invoices-need-confirm': RouteRecordInfo<'apps-invoices-need-confirm', '/apps/invoices/need-confirm', Record<never, never>, Record<never, never>>,
    'apps-invoices-outstanding-payments': RouteRecordInfo<'apps-invoices-outstanding-payments', '/apps/invoices/outstanding-payments', Record<never, never>, Record<never, never>>,
    'apps-invoices-preview-id': RouteRecordInfo<'apps-invoices-preview-id', '/apps/invoices/preview/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'apps-invoices-success-paid': RouteRecordInfo<'apps-invoices-success-paid', '/apps/invoices/success-paid', Record<never, never>, Record<never, never>>,
    'apps-logistics-dashboard': RouteRecordInfo<'apps-logistics-dashboard', '/apps/logistics/dashboard', Record<never, never>, Record<never, never>>,
    'apps-logistics-fleet': RouteRecordInfo<'apps-logistics-fleet', '/apps/logistics/fleet', Record<never, never>, Record<never, never>>,
    'apps-user-list': RouteRecordInfo<'apps-user-list', '/apps/user/list', Record<never, never>, Record<never, never>>,
    'apps-user-view-id': RouteRecordInfo<'apps-user-view-id', '/apps/user/view/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'callback-google': RouteRecordInfo<'callback-google', '/callback/google', Record<never, never>, Record<never, never>>,
    'callback-logout': RouteRecordInfo<'callback-logout', '/callback/logout', Record<never, never>, Record<never, never>>,
    'dashboards': RouteRecordInfo<'dashboards', '/dashboards', Record<never, never>, Record<never, never>>,
    'dashboards-analytics': RouteRecordInfo<'dashboards-analytics', '/dashboards/analytics', Record<never, never>, Record<never, never>>,
    'dashboards-classic': RouteRecordInfo<'dashboards-classic', '/dashboards/classic', Record<never, never>, Record<never, never>>,
    'dashboards-ecommerce': RouteRecordInfo<'dashboards-ecommerce', '/dashboards/ecommerce', Record<never, never>, Record<never, never>>,
    'dashboards-invoice': RouteRecordInfo<'dashboards-invoice', '/dashboards/invoice', Record<never, never>, Record<never, never>>,
    'forgot-password': RouteRecordInfo<'forgot-password', '/forgot-password', Record<never, never>, Record<never, never>>,
    'guest-user-not-registered': RouteRecordInfo<'guest-user-not-registered', '/guest/user-not-registered', Record<never, never>, Record<never, never>>,
    'home': RouteRecordInfo<'home', '/home', Record<never, never>, Record<never, never>>,
    'invoices-need-confirmations': RouteRecordInfo<'invoices-need-confirmations', '/invoices/need-confirmations', Record<never, never>, Record<never, never>>,
    'invoices-need-confirmations-new': RouteRecordInfo<'invoices-need-confirmations-new', '/invoices/need-confirmations/new', Record<never, never>, Record<never, never>>,
    'invoices-need-confirmations-revised': RouteRecordInfo<'invoices-need-confirmations-revised', '/invoices/need-confirmations/revised', Record<never, never>, Record<never, never>>,
    'invoices-on-revise': RouteRecordInfo<'invoices-on-revise', '/invoices/on-revise', Record<never, never>, Record<never, never>>,
    'invoices-outstanding-payment': RouteRecordInfo<'invoices-outstanding-payment', '/invoices/outstanding-payment', Record<never, never>, Record<never, never>>,
    'invoices-paid-off': RouteRecordInfo<'invoices-paid-off', '/invoices/paid-off', Record<never, never>, Record<never, never>>,
    'invoices-preview-id': RouteRecordInfo<'invoices-preview-id', '/invoices/preview/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'invoices-success-confirm-id': RouteRecordInfo<'invoices-success-confirm-id', '/invoices/success-confirm/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'license': RouteRecordInfo<'license', '/license', Record<never, never>, Record<never, never>>,
    'login': RouteRecordInfo<'login', '/login', Record<never, never>, Record<never, never>>,
    'login copy': RouteRecordInfo<'login copy', '/login copy', Record<never, never>, Record<never, never>>,
    'logout': RouteRecordInfo<'logout', '/logout', Record<never, never>, Record<never, never>>,
    'maintenance': RouteRecordInfo<'maintenance', '/maintenance', Record<never, never>, Record<never, never>>,
    'manage-roles': RouteRecordInfo<'manage-roles', '/manage/roles', Record<never, never>, Record<never, never>>,
    'manage-users': RouteRecordInfo<'manage-users', '/manage/users', Record<never, never>, Record<never, never>>,
    'manage-users-create': RouteRecordInfo<'manage-users-create', '/manage/users/create', Record<never, never>, Record<never, never>>,
    'manage-users-edit-data': RouteRecordInfo<'manage-users-edit-data', '/manage/users/edit/data', Record<never, never>, Record<never, never>>,
    'manage-users-edit-feature': RouteRecordInfo<'manage-users-edit-feature', '/manage/users/edit/feature', Record<never, never>, Record<never, never>>,
    'manage-users-edit-id': RouteRecordInfo<'manage-users-edit-id', '/manage/users/edit/id', Record<never, never>, Record<never, never>>,
    'manage-users-store-create': RouteRecordInfo<'manage-users-store-create', '/manage/users/store/create', Record<never, never>, Record<never, never>>,
    'master-access': RouteRecordInfo<'master-access', '/master/access', Record<never, never>, Record<never, never>>,
    'master-clients': RouteRecordInfo<'master-clients', '/master/clients', Record<never, never>, Record<never, never>>,
    'master-companies': RouteRecordInfo<'master-companies', '/master/companies', Record<never, never>, Record<never, never>>,
    'master-credentials': RouteRecordInfo<'master-credentials', '/master/credentials', Record<never, never>, Record<never, never>>,
    'not-authorized': RouteRecordInfo<'not-authorized', '/not-authorized', Record<never, never>, Record<never, never>>,
    'pages-account-settings-tab': RouteRecordInfo<'pages-account-settings-tab', '/pages/account-settings/:tab', { tab: ParamValue<true> }, { tab: ParamValue<false> }>,
    'pages-faq': RouteRecordInfo<'pages-faq', '/pages/faq', Record<never, never>, Record<never, never>>,
    'pages-pricing': RouteRecordInfo<'pages-pricing', '/pages/pricing', Record<never, never>, Record<never, never>>,
    'pages-user-profile-tab': RouteRecordInfo<'pages-user-profile-tab', '/pages/user-profile/:tab', { tab: ParamValue<true> }, { tab: ParamValue<false> }>,
    'register': RouteRecordInfo<'register', '/register', Record<never, never>, Record<never, never>>,
    'users-password-id': RouteRecordInfo<'users-password-id', '/users/password/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'v1-manage-permissions': RouteRecordInfo<'v1-manage-permissions', '/v1/manage/permissions', Record<never, never>, Record<never, never>>,
    'v1-manage-roles': RouteRecordInfo<'v1-manage-roles', '/v1/manage/roles', Record<never, never>, Record<never, never>>,
    'v1-manage-users-list': RouteRecordInfo<'v1-manage-users-list', '/v1/manage/users/list', Record<never, never>, Record<never, never>>,
    'v1-manage-users-view-id': RouteRecordInfo<'v1-manage-users-view-id', '/v1/manage/users/view/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'welcome': RouteRecordInfo<'welcome', '/welcome', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  export const RouterLinkProps: RouterLinkPropsTyped<RouteNamedMap>

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
